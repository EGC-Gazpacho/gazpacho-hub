name: Run tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  pytest:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: uvlhub_root_password
          MYSQL_DATABASE: uvlhubdb_test
          MYSQL_USER: uvlhub_user
          MYSQL_PASSWORD: uvlhub_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Prepare environment
      run: |
        sed -i '/rosemary @ file:\/\/\/app/d' requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run Tests
      env:
        FLASK_ENV: testing
        MARIADB_HOSTNAME: 127.0.0.1
        MARIADB_PORT: 3306
        MARIADB_TEST_DATABASE: uvlhubdb_test
        MARIADB_USER: uvlhub_user
        MARIADB_PASSWORD: uvlhub_password
        GITHUB_TOKEN: ${{ secrets.UPLOAD_TOKEN_GITHUB }}
        MAIL_SERVER: smtp.gmail.com
        MAIL_PORT: 587
        MAIL_USE_TLS: True
        MAIL_USERNAME: romerito3rubn@gmail.com
        MAIL_PASSWORD: ${{ secrets.FLASKMAIL_TOKEN }}
        MAIL_DEFAULT_SENDER: romerito3rubn@gmail.com
        BASE_URL: http://localhost:5000
        SECRET_KEY: ${{ secrets.FLASKMAIL_TOKEN }}

      
      run: |
        pytest app/modules/ --cov=app/modules/ --cov-report=xml:coverage.xml --ignore-glob='*selenium*'

    - name: Parse Coverage Report
      id: parse-coverage
      run: |
          coverage_report=$(python -c '
          import xml.etree.ElementTree as ET
          tree = ET.parse("coverage.xml")
          root = tree.getroot()
          coverage = []
          for package in root.findall(".//package"):
              package_name = package.get("name")
              coverage.append(f"**{package_name}**")
              for class_elem in package.findall(".//class"):
                  class_name = class_elem.get("name")
                  line_rate = class_elem.get("line-rate")
                  if class_name and line_rate:
                      coverage.append(f"{class_name}_{line_rate}")
          print(",".join(coverage))
          ')
          echo "coverage=$coverage_report" >> $GITHUB_ENV

    - name: Format and Comment on PR with Coverage Results
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v2
      with:
        token: ${{ secrets.UPLOAD_TOKEN_GITHUB }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## Test Coverage Report
          ${{ env.coverage }}